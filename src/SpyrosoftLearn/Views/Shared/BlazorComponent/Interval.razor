@using Blazorise.Charts.Streaming;
@using Blazorise.Charts;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@using SpyrosoftLearn.Dtos;
@using SpyrosoftLearn.Services.Interfaces;

@inject NavigationManager Navigation
@inject IGameResultService gameResultService

@implements IAsyncDisposable

<div class="interval-container">
    <div class="chart-container">
        <h1>Catch the Time</h1>
        <h2>@UserConfigNumber . @UserName</h2>
        <br />

        <LineChart @ref="@horizontalLineChart" TItem="LiveDataPoint" OptionsObject="@horizontalLineChartOptions">
            <ChartStreaming @ref="@chartStreaming"
                            TItem="LiveDataPoint"
                            Options="new ChartStreamingOptions { Delay = 1 }"
                            Refreshed="@OnHorizontalLineRefreshed" />
        </LineChart>


        <div class="chart-table-container">
            <div class="row">
                <button class="create-round-button" @onclick="Send" disabled="@(!IsConnected)">Send</button>
            </div>

            @* <div class="row">
            <ul id="messagesList">
            @foreach (var message in messages)
            {
            <li>@message</li>
            }
            </ul>
            </div>    *@
        </div>
    </div>
    <div class="results-container">
        <table class="table-results table table-striped">
            <thead>
                <th>User</th>
                <th>Game Points</th>
                <th>Round Points</th>
                <th>Total Points</th>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {            
                    <tr>
                        <td>@item.UserName</td>
                        <td>@item.NumberOfPoints</td>
                        <td>@item.NumberOfLuckyPoints</td>
                        <td>@item.TotalPoints</td>
                    </tr>
                }
            </tbody>
        </table>       
    </div>
</div>



@code{
    [Parameter]
    public string UserName { get; set; } = string.Empty;

    [Parameter]
    public string UserId { get; set; } = string.Empty;

    [Parameter]
    public int UserConfigNumber { get; set; }

    [Parameter]
    public int NumberOfClicks { get; set; }

    [Parameter]
    public bool IsAdmin { get; set; }

    public const int MaxNumberOfClicks = 5;

    public List<GameResultDto> Model = new List<GameResultDto>();

    private int countRows { get; set; } = 1;

    //signalR
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private List<ChartData> chartMessages = new List<ChartData>();

    //chart
    LineChart<LiveDataPoint> horizontalLineChart;
    ChartStreaming<LiveDataPoint> chartStreaming;

    protected override async Task OnInitializedAsync()
    {
        //for https
        //hubConnection = new HubConnectionBuilder()
        //    .WithUrl(Navigation.ToAbsoluteUri("/intervalhub"))
        //    .Build();

        //for http

        Model = gameResultService.GetGameResults();

        hubConnection = new HubConnectionBuilder()
         .WithUrl(Navigation.ToAbsoluteUri("/intervalhub"), (opts) =>
         {
             opts.WebSocketConfiguration = conf =>
                   {
                       conf.RemoteCertificateValidationCallback = (message, cert, chain, errors) => { return true; };
                   };
             opts.HttpMessageHandlerFactory = factory => new HttpClientHandler
                 {
                     ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => { return true; }
                 };
         }).Build();

        hubConnection.On<int, string, DateTime>("ReceiveMessage", ( userNumber, userName, messageTime) =>
        {            
            var encodedMsg = $"{userName} => {messageTime.ToString("hh:mm:ss.fff")}";
            var data = new ChartData { UserName = userName, UserNumber = userNumber, MessageTime = messageTime };

            messages.Add(encodedMsg);
            chartMessages.Add(data);

            Model = gameResultService.GetGameResults();

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            NumberOfClicks++;
            await hubConnection.SendAsync("SendMessage", UserConfigNumber, UserId, UserName, DateTime.Now);
        }
    }

    public bool IsConnected =>
        (hubConnection?.State == HubConnectionState.Connected && NumberOfClicks < MaxNumberOfClicks && IsAdmin == false);

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 127, 17, 224, 1 ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    public struct LiveDataPoint
    {
        public object X { get; set; }

        public object Y { get; set; }
    }
    
    object horizontalLineChartOptions = new
    {
        Scales = new
        {
            Y = new
            {
                Title = new
                {
                    Display = true,
                    Text = "Value"
                }
            }
        }
    };

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await Task.WhenAll(
                HandleRedraw( horizontalLineChart, GetLineChartDataset1 ) );
        }
    }

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>( BaseChart<TDataSet, TItem, TOptions, TModel> chart, params Func<TDataSet>[] getDataSets )
        where TDataSet : ChartDataset<TItem>
        where TOptions : ChartOptions
        where TModel : ChartModel
    {
        await chart.Clear();

        await chart.AddLabelsDatasetsAndUpdate( Labels, getDataSets.Select( x => x.Invoke() ).ToArray() );
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1()
    {
        return new LineChartDataset<LiveDataPoint>
        {
            Data = new List<LiveDataPoint>(),
            Label = "Catch the Time",
            BackgroundColor = backgroundColors[2],
            PointBackgroundColor = borderColors[0],
            PointRadius=5,
            BorderColor = borderColors[0],
            Fill = false,
            ShowLine = false
        };
    }

    Task OnHorizontalLineRefreshed( ChartStreamingData<LiveDataPoint> data)
    { 
        if (chartMessages.Any())
        {
            var firstMessage = chartMessages.First();
            data.Value = new LiveDataPoint
                {
                    X = firstMessage.MessageTime,
                    Y = firstMessage.UserNumber
                };

            chartMessages.Remove(firstMessage);
        }

        return Task.CompletedTask;
    }

    public class ChartData
    {
        public string UserName { get; set; } = default!;
        public int UserNumber { get; set; }
        public DateTime MessageTime { get; set; }
    }
}