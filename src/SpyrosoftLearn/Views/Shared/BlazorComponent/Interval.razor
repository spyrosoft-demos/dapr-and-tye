@using Blazorise.Charts.Streaming;
@using Blazorise.Charts;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<div class="chart-container">
     <h1>Catch the Time</h1>
     <h2>@UserConfigNumber . @UserName</h2>
     <br/>

    <LineChart @ref="@horizontalLineChart" TItem="LiveDataPoint" OptionsObject="@horizontalLineChartOptions">
        <ChartStreaming @ref="@chartStreaming"
                    TItem="LiveDataPoint"
                    Options="new ChartStreamingOptions { Delay = 1 }"
                    Refreshed="@OnHorizontalLineRefreshed"
                    />
    </LineChart>

@*    <Row>
        <Column>
            <Button Color="Color.Primary" Clicked="@(()=>chartStreaming.Pause())">Pause</Button>
            <Button Color="Color.Primary" Clicked="@(()=>chartStreaming.Play())">Play</Button>
        </Column>
    </Row>*@

    
   
    <div class="chart-table-container">
        <div class="row">
            <button class="create-round-button" @onclick="Send" disabled="@(!IsConnected)">Send</button>
        </div>

        <div class="row">
            <ul id="messagesList">
                @foreach (var message in messages)
                {
                    <li>@message</li>
                }
            </ul>
        </div>    
    </div>
</div>


@code{
    [Parameter]
    public string UserName { get; set; } = string.Empty;

    [Parameter]
    public string UserId { get; set; } = string.Empty;

    [Parameter]
    public int UserConfigNumber { get; set; }

    [Parameter]
    public int NumberOfClicks { get; set; }

    public const int MaxNumberOfClicks = 5;

    //signalR
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private List<ChartData> chartMessages = new List<ChartData>();

    //chart
    LineChart<LiveDataPoint> horizontalLineChart;
    ChartStreaming<LiveDataPoint> chartStreaming;
    //Random random = new Random(DateTime.Now.Millisecond);

    protected override async Task OnInitializedAsync()
    {
        //for https
        //hubConnection = new HubConnectionBuilder()
        //    .WithUrl(Navigation.ToAbsoluteUri("/intervalhub"))
        //    .Build();

        //for http
        hubConnection = new HubConnectionBuilder()
         .WithUrl(Navigation.ToAbsoluteUri("/intervalhub"), (opts) =>
         {
             opts.WebSocketConfiguration = conf =>
                   {
                       conf.RemoteCertificateValidationCallback = (message, cert, chain, errors) => { return true; };
                   };
             opts.HttpMessageHandlerFactory = factory => new HttpClientHandler
                 {
                     ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => { return true; }
                 };
         }).Build();

        hubConnection.On<int, string, DateTime>("ReceiveMessage", ( userNumber, userName, messageTime) =>
        {            
            var encodedMsg = $"{userName} => {messageTime.ToString("hh:mm:ss.fff")}";
            var data = new ChartData { UserName = userName, UserNumber = userNumber, MessageTime = messageTime };

            messages.Add(encodedMsg);
            chartMessages.Add(data);

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            NumberOfClicks++;
            await hubConnection.SendAsync("SendMessage", UserConfigNumber, UserId, UserName, DateTime.Now);
        }
    }

    public bool IsConnected =>
        (hubConnection?.State == HubConnectionState.Connected && NumberOfClicks < MaxNumberOfClicks);

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    //chart
    //LineChart<LiveDataPoint> horizontalLineChart;
    //ChartStreaming<LiveDataPoint>  chartStreaming;
    //Random random = new Random( DateTime.Now.Millisecond );

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54, 162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ), ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 127, 17, 224, 1 ), ChartColor.FromRgba( 54, 162, 235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153, 102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    public struct LiveDataPoint
    {
        public object X { get; set; }

        public object Y { get; set; }
    }

    object horizontalLineChartOptions = new
    {
        Scales = new
        {
            Y = new
            {
                Title = new
                {
                    Display = true,
                    Text = "Value"
                }
            }
        },
        //Interaction = new
        //{
        //    intersect = true
        //}
    };

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await Task.WhenAll(
                HandleRedraw( horizontalLineChart, GetLineChartDataset1 ) );
        }
    }

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>( BaseChart<TDataSet, TItem, TOptions, TModel> chart, params Func<TDataSet>[] getDataSets )
        where TDataSet : ChartDataset<TItem>
        where TOptions : ChartOptions
        where TModel : ChartModel
    {
        await chart.Clear();

        await chart.AddLabelsDatasetsAndUpdate( Labels, getDataSets.Select( x => x.Invoke() ).ToArray() );
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1()
    {
        return new LineChartDataset<LiveDataPoint>
        {
            Data = new List<LiveDataPoint>(),
            Label = "Catch the Time",
            BackgroundColor = backgroundColors[0],
            PointBackgroundColor = borderColors[0],
            PointRadius=5,
            BorderColor = borderColors[0],
            Fill = false,
            ShowLine = false
        };
    }

    Task OnHorizontalLineRefreshed( ChartStreamingData<LiveDataPoint> data)
    {        
        //data.Value = new LiveDataPoint
        //{
        //    X = DateTime.Now,
        //    Y = RandomScalingFactor(),
        //};

        if (chartMessages.Any())
        {
            var firstMessage = chartMessages.First();
            data.Value = new LiveDataPoint
                {
                    X = firstMessage.MessageTime,
                    Y = firstMessage.UserNumber
                };

            chartMessages.Remove(firstMessage);
        }

        return Task.CompletedTask;
    }

    //double RandomScalingFactor()
    //{
    //    return ( random.NextDouble() > 0.5 ? 1.0 : -1.0 ) * Math.Round( random.NextDouble() * 100 );
    //}

    public class ChartData
    {
        public string UserName { get; set; } = default!;
        public int UserNumber { get; set; }
        public DateTime MessageTime { get; set; }
    }
}